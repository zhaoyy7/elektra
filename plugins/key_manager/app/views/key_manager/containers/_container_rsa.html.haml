- classes = ["js-secrets", "js-#{::KeyManager::Container::Type::RSA}", ("hide" unless @selected_type == ::KeyManager::Container::Type::RSA)]
%div{class: classes}
  %h3 Secrets
  %p An RSA container is used for storing RSA public keys, private keys, and private key pass phrases:

  .row
    .col-sm-6
      = f.simple_fields_for :secrets do |ff|
        = ff.simple_fields_for ::KeyManager::Container::Type::RSA.to_sym do |secret|
          = secret.input :private_key, label: "Private key", as: :select, required: true,
          collection: @private_keys.map{|secret|["#{secret.display_name} (created: #{date_humanize(secret.created)}, status: #{secret.status})", secret.secret_ref]},
          prompt: "Choose a private key", disabled: @selected_type != ::KeyManager::Container::Type::RSA, selected: @selected_secrets.fetch('private_key', []),
          input_html: {data: {target: "private-key-input-in-new-rsa-container-dialog"}}

          = secret.input :private_key_passphrase, label: "Private key passphrase", as: :select, required: true,
          collection: @passphrases.map{|secret|["#{secret.display_name} (created: #{date_humanize(secret.created)}, status: #{secret.status})", secret.secret_ref]},
          prompt: "Choose a private key passphrase", disabled: @selected_type != ::KeyManager::Container::Type::RSA, selected: @selected_secrets.fetch('private_key_passphrase', []),
          input_html: { data: {target: "secret-input-in-new-rsa-container-dialog"}}

          = secret.input :public_key, label: "Public key", as: :select, required: true,
          collection: @public_keys.map{|secret|["#{secret.display_name} (created: #{date_humanize(secret.created)}, status: #{secret.status})", secret.secret_ref]},
          prompt: "Choose a public key", disabled: @selected_type != ::KeyManager::Container::Type::RSA, selected: @selected_secrets.fetch('public_key', []),
          input_html: {data: {target: "public-key-input-in-new-rsa-container-dialog"}}